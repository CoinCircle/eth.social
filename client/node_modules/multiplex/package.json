{
  "_args": [
    [
      {
        "raw": "multiplex@github:dignifiedquire/multiplex",
        "scope": null,
        "escapedName": "multiplex",
        "name": "multiplex",
        "rawSpec": "github:dignifiedquire/multiplex",
        "spec": "github:dignifiedquire/multiplex",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:dignifiedquire/multiplex.git",
          "sshUrl": "git+ssh://git@github.com/dignifiedquire/multiplex.git",
          "httpsUrl": "git+https://github.com/dignifiedquire/multiplex.git",
          "gitUrl": "git://github.com/dignifiedquire/multiplex.git",
          "shortcut": "github:dignifiedquire/multiplex",
          "directUrl": "https://raw.githubusercontent.com/dignifiedquire/multiplex/master/package.json"
        }
      },
      "/Users/mota/Sandbox/eth.social/client/node_modules/libp2p-multiplex"
    ]
  ],
  "_from": "dignifiedquire/multiplex",
  "_id": "multiplex@6.7.0",
  "_inCache": true,
  "_location": "/multiplex",
  "_phantomChildren": {},
  "_requested": {
    "raw": "multiplex@github:dignifiedquire/multiplex",
    "scope": null,
    "escapedName": "multiplex",
    "name": "multiplex",
    "rawSpec": "github:dignifiedquire/multiplex",
    "spec": "github:dignifiedquire/multiplex",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:dignifiedquire/multiplex.git",
      "sshUrl": "git+ssh://git@github.com/dignifiedquire/multiplex.git",
      "httpsUrl": "git+https://github.com/dignifiedquire/multiplex.git",
      "gitUrl": "git://github.com/dignifiedquire/multiplex.git",
      "shortcut": "github:dignifiedquire/multiplex",
      "directUrl": "https://raw.githubusercontent.com/dignifiedquire/multiplex/master/package.json"
    }
  },
  "_requiredBy": [
    "/libp2p-multiplex"
  ],
  "_resolved": "git://github.com/dignifiedquire/multiplex.git#b5d5edd30454e2c978ee8c52df86f5f4840d2eab",
  "_shasum": "cbd5a98ba4bcc808d2161c0586f97b043fc1bc9f",
  "_shrinkwrap": null,
  "_spec": "multiplex@github:dignifiedquire/multiplex",
  "_where": "/Users/mota/Sandbox/eth.social/client/node_modules/libp2p-multiplex",
  "author": {
    "name": "max ogden"
  },
  "bugs": {
    "url": "https://github.com/maxogden/multiplex/issues"
  },
  "contributors": [
    {
      "name": "Max Ogden",
      "email": "max@maxogden.com",
      "url": "https://github.com/maxogden"
    },
    {
      "name": "Ayman Mackouly",
      "email": "ayman.mackouly@gmail.com",
      "url": "https://github.com/1N50MN14/"
    }
  ],
  "dependencies": {
    "debug": "^2.6.1",
    "duplexify": "^3.4.2",
    "readable-stream": "^2.0.2",
    "varint": "^4.0.0"
  },
  "description": "A binary stream multiplexer. Stream multiple streams of binary data over a single binary stream.",
  "devDependencies": {
    "chunky": "0.0.0",
    "concat-stream": "^1.4.8",
    "pump": "^1.0.2",
    "standard": "^8.6.0",
    "tape": "^4.0.0",
    "through2": "^0.6.5"
  },
  "gitHead": "b5d5edd30454e2c978ee8c52df86f5f4840d2eab",
  "homepage": "https://github.com/maxogden/multiplex",
  "license": "BSD 2-Clause",
  "main": "src/index.js",
  "name": "multiplex",
  "optionalDependencies": {},
  "readme": "# multiplex\n\nA binary stream multiplexer. Stream multiple streams of binary data over a single binary stream. Like [mux-demux](https://npmjs.org/package/mux-demux) but faster since it only works with binary streams.\n\n[![NPM](https://nodei.co/npm/multiplex.png)](https://nodei.co/npm/multiplex/)\n\n## api\n\n### `var multiplex = require('multiplex')([options], [onStream])`\n\nReturns a new multiplexer. You can use this to create sub-streams. All data written to sub-streams will be emitted through this. If you pipe a multiplex instance to another multiplex instance all substream data will be multiplexed and demultiplexed on the other end.\n\n`onStream` will be called with `(stream, id)` whenever a new remote sub-stream is created with an id that hasn't already been created with `.createStream`.\n\nOptions include:\n\n* `opts.limit` - set the max allowed message size. default is no maximum\n\nAny other options set in `options` are used as defaults options when creating sub streams.\n\n### `stream = multiplex.createStream([id], [options])`\n\nCreates a new sub-stream with an optional whole string `id` (default is the stream channel id).\n\nSub-streams are duplex streams.\n\nOptions include:\n\n* `opts.chunked` - enables chunked mode on all streams (message framing not guaranteed)\n* `opts.halfOpen` - make channels support half open mode meaning that they can be readable but not writable and vice versa\n\n### `stream = multiplex.receiveStream(id, [options])`\n\nExplicitly receive an incoming stream.\n\nThis is useful if you have a function that accepts an instance of multiplex\nand you want to receive a substream.\n\n### `stream = multiplex.createSharedStream(id, [options])`\n\nCreate a shared stream. If both ends create a shared stream with\nthe same id, writing data on one end will emit the same data on the other end\n\n## events\n\n### `multiplex.on('error', function (err) {})`\n\nEmitted when the outer stream encounters invalid data\n\n### `multiplex.on('stream', function (stream, id) {})`\n\nEmitted when a it a new stream arrives.\n\n### `stream.on('error', function (err) {})`\n\nEmitted if the inner stream is destroyed with an error\n\n### example\n\n```js\nvar multiplex = require('multiplex')\nvar plex1 = multiplex()\nvar stream1 = plex1.createStream()\nvar stream2 = plex1.createStream()\n\nvar plex2 = multiplex(function onStream(stream, id) {\n  stream.on('data', function(c) {\n    console.log('data', id, c.toString())\n  })\n})\n\nplex1.pipe(plex2)\n\nstream1.write(new Buffer('stream one!'))\nstream2.write(new Buffer('stream two!'))\n```\n\n### contributing\n\nmultiplex is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](contributing.md) file for more details.\n\n### contributors\n\nmultiplex is only possible due to the excellent work of the following contributors:\n\n<table><tbody><tr><th align=\"left\">maxogden</th><td><a href=\"https://github.com/maxogden\">GitHub/maxogden</a></td></tr>\n<tr><th align=\"left\">1N50MN14</th><td><a href=\"https://github.com/1N50MN14\">GitHub/1N50MN14</a></td></tr>\n<tr><th align=\"left\">substack</th><td><a href=\"https://github.com/substack\">GitHub/substack</a></td></tr>\n<tr><th align=\"left\">mafintosh</th><td><a href=\"https://github.com/mafintosh\">GitHub/mafintosh</a></td></tr>\n</tbody></table>\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/maxogden/multiplex.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "node test.js"
  },
  "version": "6.7.0"
}
