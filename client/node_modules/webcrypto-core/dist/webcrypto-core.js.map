{"version":3,"file":"webcrypto-core.js","sources":["../src/error.ts","../src/base.ts","../src/alg.ts","../src/base64url.ts","../src/aes/crypto.ts","../src/sha/crypto.ts","../src/ec/crypto.ts","../src/hmac/crypto.ts","../src/pbkdf2/crypto.ts","../src/rsa/crypto.ts","../src/subtle.ts"],"sourcesContent":["function printf(text: string, ...args: any[]) {\r\n    let msg: string = text;\r\n    const regFind = /[^%](%\\d+)/g;\r\n    let match: RegExpExecArray | null;\r\n    const matches: Array<{ arg: string, index: number }> = [];\r\n    // tslint:disable-next-line:no-conditional-assignment\r\n    while (match = regFind.exec(msg)) {\r\n        matches.push({ arg: match[1], index: match.index });\r\n    }\r\n\r\n    // replace matches\r\n    for (let i = matches.length - 1; i >= 0; i--) {\r\n        const item = matches[i];\r\n        const arg = item.arg.substring(1);\r\n        const index = item.index + 1;\r\n        msg = msg.substring(0, index) + arguments[+arg] + msg.substring(index + 1 + arg.length);\r\n    }\r\n\r\n    // convert %% -> %\r\n    msg = msg.replace(\"%%\", \"%\");\r\n\r\n    return msg;\r\n}\r\n\r\nexport class WebCryptoError extends Error {\r\n\r\n    public static NOT_SUPPORTED = \"Method is not supported\";\r\n\r\n    public code = 0;\r\n    public stack: string;\r\n\r\n    constructor(template: string, ...args: any[]) {\r\n        super();\r\n        this.message = printf(template, ...args as any);\r\n        const error = new Error(this.message);\r\n        error.name = (this as any)[\"constructor\"].name;\r\n        this.stack = (error as any).stack;\r\n    }\r\n\r\n}\r\n\r\nexport class AlgorithmError extends WebCryptoError {\r\n\r\n    public static PARAM_REQUIRED = \"Algorithm hasn't got required paramter '%1'\";\r\n    public static PARAM_WRONG_TYPE = \"Algorithm has got wrong type for paramter '%1'. Must be %2\";\r\n    public static PARAM_WRONG_VALUE = \"Algorithm has got wrong value for paramter '%1'. Must be %2\";\r\n    public static WRONG_ALG_NAME = \"Algorithm has got wrong name '%1'. Must be '%2'\";\r\n    public static UNSUPPORTED_ALGORITHM = \"Algorithm '%1' is not supported\";\r\n    public static WRONG_USAGE = \"Algorithm doesn't support key usage '%1'\";\r\n\r\n    public code = 1;\r\n}\r\n\r\nexport class CryptoKeyError extends WebCryptoError {\r\n    public static EMPTY_KEY = \"CryptoKey is empty\";\r\n    public static WRONG_KEY_ALG = \"CryptoKey has wrong algorithm '%1'. Must be '%2'\";\r\n    public static WRONG_KEY_TYPE = \"CryptoKey has wrong type '%1'. Must be '%2'\";\r\n    public static WRONG_KEY_USAGE = \"CryptoKey has wrong key usage. Must be '%1'\";\r\n    public static NOT_EXTRACTABLE = \"CryptoKey is not extractable\";\r\n    public static WRONG_FORMAT = \"CryptoKey has '%1' type. It can be used with '%2' format\";\r\n    public static UNKNOWN_FORMAT = `Unknown format in use '%1'. Must be one of 'raw', 'pkcs8', 'spki'  or 'jwk'`;\r\n    public static ALLOWED_FORMAT = `Wrong format value '%1'. Must be %2`;\r\n\r\n    public code = 3;\r\n}","import { AlgorithmError, CryptoKeyError, WebCryptoError } from \"./error\";\r\n\r\nexport function PrepareAlgorithm(alg: AlgorithmIdentifier | string): Algorithm {\r\n    let res: Algorithm;\r\n    if (typeof alg === \"string\") {\r\n        res = { name: alg };\r\n    } else {\r\n        res = alg;\r\n    }\r\n    BaseCrypto.checkAlgorithm(res);\r\n    const hashedAlg: RsaHashedKeyAlgorithm = alg as any;\r\n    if (hashedAlg.hash) {\r\n        hashedAlg.hash = PrepareAlgorithm(hashedAlg.hash);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function PrepareData(data: BufferSource, paramName: string): Uint8Array {\r\n    if (!data) {\r\n        throw new WebCryptoError(`Parameter '${paramName}' is required and cant be empty`);\r\n    }\r\n    if (ArrayBuffer.isView(data)) {\r\n        return new Uint8Array(data.buffer);\r\n    }\r\n    if (data instanceof ArrayBuffer) {\r\n        return new Uint8Array(data);\r\n    }\r\n    throw new WebCryptoError(`Incoming parameter '${paramName}' has wrong data type. Must be ArrayBufferView or ArrayBuffer`);\r\n}\r\n\r\nexport class BaseCrypto {\r\n\r\n    public static checkAlgorithm(alg: Algorithm) {\r\n        if (typeof alg !== \"object\") {\r\n            throw new TypeError(\"Wrong algorithm data type. Must be Object\");\r\n        }\r\n        if (!(\"name\" in alg)) {\r\n            throw new AlgorithmError(AlgorithmError.PARAM_REQUIRED, \"name\");\r\n        }\r\n    }\r\n\r\n    public static checkAlgorithmParams(alg: Algorithm) {\r\n        this.checkAlgorithm(alg);\r\n    }\r\n\r\n    public static checkKey(key: CryptoKey, alg?: string, type: string | null = null, usage: string | null = null) {\r\n        // check key empty\r\n        if (!key) {\r\n            throw new CryptoKeyError(CryptoKeyError.EMPTY_KEY);\r\n        }\r\n        // check alg\r\n        const keyAlg = key.algorithm;\r\n        this.checkAlgorithm(keyAlg as Algorithm);\r\n        if (alg && (keyAlg.name!.toUpperCase() !== alg.toUpperCase())) {\r\n            throw new CryptoKeyError(CryptoKeyError.WRONG_KEY_ALG, keyAlg.name, alg);\r\n        }\r\n        // check type\r\n        if (type && (!key.type || key.type.toUpperCase() !== type.toUpperCase())) {\r\n            throw new CryptoKeyError(CryptoKeyError.WRONG_KEY_TYPE, key.type, type);\r\n        }\r\n        // check usage\r\n        if (usage) {\r\n            if (!key.usages.some((keyUsage) => usage.toUpperCase() === keyUsage.toUpperCase())) {\r\n                throw new CryptoKeyError(CryptoKeyError.WRONG_KEY_USAGE, usage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static checkWrappedKey(key: CryptoKey) {\r\n        if (!key.extractable) {\r\n            throw new CryptoKeyError(CryptoKeyError.NOT_EXTRACTABLE);\r\n        }\r\n    }\r\n\r\n    public static checkKeyUsages(keyUsages: string[]) {\r\n        if (!keyUsages || !keyUsages.length) {\r\n            throw new WebCryptoError(\"Parameter 'keyUsages' cannot be empty.\");\r\n        }\r\n    }\r\n\r\n    public static checkFormat(format: string, type?: string) {\r\n        switch (format.toLowerCase()) {\r\n            case \"raw\":\r\n                if (type && type.toLowerCase() !== \"secret\" && type && type.toLowerCase() !== \"public\") {\r\n                    throw new CryptoKeyError(CryptoKeyError.WRONG_FORMAT, type, \"raw\");\r\n                }\r\n                break;\r\n            case \"pkcs8\":\r\n                if (type && type.toLowerCase() !== \"private\") {\r\n                    throw new CryptoKeyError(CryptoKeyError.WRONG_FORMAT, type, \"pkcs8\");\r\n                }\r\n                break;\r\n            case \"spki\":\r\n                if (type && type.toLowerCase() !== \"public\") {\r\n                    throw new CryptoKeyError(CryptoKeyError.WRONG_FORMAT, type, \"spki\");\r\n                }\r\n                break;\r\n            case \"jwk\":\r\n                break;\r\n            default:\r\n                throw new CryptoKeyError(CryptoKeyError.UNKNOWN_FORMAT, format);\r\n        }\r\n    }\r\n\r\n    public static generateKey(algorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey | CryptoKeyPair> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static digest(algorithm: Algorithm, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static sign(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static verify(algorithm: Algorithm, key: CryptoKey, signature: Uint8Array, data: Uint8Array): PromiseLike<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static encrypt(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static decrypt(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static deriveBits(algorithm: Algorithm, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static deriveKey(algorithm: Algorithm, baseKey: CryptoKey, derivedKeyType: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static importKey(format: string, keyData: JsonWebKey | BufferSource, algorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: Algorithm): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n    public static unwrapKey(format: string, wrappedKey: Uint8Array, unwrappingKey: CryptoKey, unwrapAlgorithm: Algorithm, unwrappedKeyAlgorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            throw new WebCryptoError(WebCryptoError.NOT_SUPPORTED);\r\n        });\r\n    }\r\n\r\n}\r\n","export const AlgorithmNames = {\r\n    RsaSSA: \"RSASSA-PKCS1-v1_5\",\r\n    RsaPSS: \"RSA-PSS\",\r\n    RsaOAEP: \"RSA-OAEP\",\r\n    AesCTR: \"AES-CTR\",\r\n    AesCMAC: \"AES-CMAC\",\r\n    AesGCM: \"AES-GCM\",\r\n    AesCBC: \"AES-CBC\",\r\n    AesKW: \"AES-KW\",\r\n    Sha1: \"SHA-1\",\r\n    Sha256: \"SHA-256\",\r\n    Sha384: \"SHA-384\",\r\n    Sha512: \"SHA-512\",\r\n    EcDSA: \"ECDSA\",\r\n    EcDH: \"ECDH\",\r\n    Hmac: \"HMAC\",\r\n    Pbkdf2: \"PBKDF2\",\r\n};","// Fix btoa and atob for NodeJS\r\nif (typeof self === \"undefined\") {\r\n    const g = global as any;\r\n    g.btoa = (data: string) => new Buffer(data, \"binary\").toString(\"base64\");\r\n    g.atob = (data: string) => new Buffer(data, \"base64\").toString(\"binary\");\r\n}\r\n\r\nexport class Base64Url {\r\n\r\n    public static encode(value: Uint8Array): string {\r\n        const str = this.buffer2string(value);\r\n        const res = btoa(str)\r\n            .replace(/=/g, \"\")\r\n            .replace(/\\+/g, \"-\")\r\n            .replace(/\\//g, \"_\");\r\n        return res;\r\n    }\r\n\r\n    public static decode(base64url: string): Uint8Array {\r\n        while (base64url.length % 4) {\r\n            base64url += \"=\";\r\n        }\r\n        const base64 = base64url\r\n            .replace(/\\-/g, \"+\")\r\n            .replace(/_/g, \"/\");\r\n        return this.string2buffer(atob(base64));\r\n    }\r\n\r\n    protected static buffer2string(buffer: Uint8Array) {\r\n        let res = \"\";\r\n        const len = buffer.length;\r\n        for (let i = 0; i < len; i++) {\r\n            res += String.fromCharCode(buffer[i]);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    protected static string2buffer(binaryString: string) {\r\n        const res = new Uint8Array(binaryString.length);\r\n        const len = binaryString.length;\r\n        for (let i = 0; i < len; i++) {\r\n            res[i] = binaryString.charCodeAt(i);\r\n        }\r\n        return res;\r\n    }\r\n\r\n}\r\n","import { AlgorithmNames } from \"../alg\";\r\nimport { BaseCrypto } from \"../base\";\r\nimport { AlgorithmError, CryptoKeyError, WebCryptoError } from \"../error\";\r\n\r\nclass AesKeyGenParamsError extends AlgorithmError {\r\n    public code = 7;\r\n}\r\n\r\nexport class Aes extends BaseCrypto {\r\n\r\n    public static ALG_NAME = \"\";\r\n    public static KEY_USAGES: string[] = [];\r\n\r\n    public static checkKeyUsages(keyUsages: string[]) {\r\n        super.checkKeyUsages(keyUsages);\r\n        const wrongUsage = keyUsages.filter((usage) => this.KEY_USAGES.indexOf(usage) === -1);\r\n        if (wrongUsage.length) {\r\n            throw new AlgorithmError(AlgorithmError.WRONG_USAGE, wrongUsage.join(\", \"));\r\n        }\r\n    }\r\n\r\n    public static checkAlgorithm(alg: Algorithm) {\r\n        if (alg.name.toUpperCase() !== this.ALG_NAME.toUpperCase()) {\r\n            throw new AlgorithmError(AlgorithmError.WRONG_ALG_NAME, alg.name, this.ALG_NAME);\r\n        }\r\n    }\r\n\r\n    public static checkKeyGenParams(alg: AesKeyGenParams) {\r\n        switch (alg.length) {\r\n            case 128:\r\n            case 192:\r\n            case 256:\r\n                break;\r\n            default:\r\n                throw new AesKeyGenParamsError(AesKeyGenParamsError.PARAM_WRONG_VALUE, \"length\", \"128, 192 or 256\");\r\n        }\r\n    }\r\n\r\n    public static generateKey(algorithm: AesKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey | CryptoKeyPair> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            this.checkKeyGenParams(algorithm);\r\n            this.checkKeyUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkKey(key, this.ALG_NAME);\r\n            this.checkFormat(format, key.type);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n    public static importKey(format: string, keyData: JsonWebKey | Uint8Array, algorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            this.checkFormat(format);\r\n            if (!(format.toLowerCase() === \"raw\" || format.toLowerCase() === \"jwk\")) {\r\n                throw new CryptoKeyError(CryptoKeyError.ALLOWED_FORMAT, format, \"'jwk' or 'raw'\");\r\n            }\r\n            this.checkKeyUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n}\r\n\r\nexport class AesAlgorithmError extends AlgorithmError {\r\n    public code = 8;\r\n}\r\n\r\nexport class AesWrapKey extends Aes {\r\n\r\n    public static wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: Algorithm): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(wrapAlgorithm);\r\n            this.checkKey(wrappingKey, this.ALG_NAME, \"secret\", \"wrapKey\");\r\n            this.checkWrappedKey(key);\r\n            this.checkFormat(format, key.type);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static unwrapKey(format: string, wrappedKey: Uint8Array, unwrappingKey: CryptoKey, unwrapAlgorithm: Algorithm, unwrappedKeyAlgorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(unwrapAlgorithm);\r\n            this.checkKey(unwrappingKey, this.ALG_NAME, \"secret\", \"unwrapKey\");\r\n            this.checkFormat(format);\r\n            // TODO check unwrappedKeyAlgorithm\r\n            // TODO check keyUSages\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class AesEncrypt extends AesWrapKey {\r\n\r\n    public static KEY_USAGES: string[] = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n\r\n    public static encrypt(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"secret\", \"encrypt\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static decrypt(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"secret\", \"decrypt\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class AesCBC extends AesEncrypt {\r\n\r\n    public static ALG_NAME = AlgorithmNames.AesCBC;\r\n\r\n    public static checkAlgorithmParams(alg: AesCbcParams) {\r\n        this.checkAlgorithm(alg);\r\n        if (!alg.iv) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_REQUIRED, \"iv\");\r\n        }\r\n        if (!(ArrayBuffer.isView(alg.iv) || alg.iv instanceof ArrayBuffer)) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, \"iv\", \"ArrayBufferView or ArrayBuffer\");\r\n        }\r\n        if (alg.iv.byteLength !== 16) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, \"iv\", \"ArrayBufferView or ArrayBuffer with size 16\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class AesCTR extends AesEncrypt {\r\n\r\n    public static ALG_NAME = AlgorithmNames.AesCTR;\r\n\r\n    public static checkAlgorithmParams(alg: AesCtrParams) {\r\n        this.checkAlgorithm(alg);\r\n        if (!(alg.counter && (ArrayBuffer.isView(alg.counter) || alg.counter instanceof ArrayBuffer))) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, \"counter\", \"ArrayBufferView or ArrayBuffer\");\r\n        }\r\n        if (alg.counter.byteLength !== 16) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, \"counter\", \"ArrayBufferView or ArrayBuffer with size 16\");\r\n        }\r\n        if (!(alg.length > 0 && alg.length <= 128)) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, \"length\", \"number [1-128]\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class AesGCM extends AesEncrypt {\r\n\r\n    public static ALG_NAME = AlgorithmNames.AesGCM;\r\n\r\n    public static checkAlgorithmParams(alg: AesGcmParams) {\r\n        this.checkAlgorithm(alg);\r\n        if (alg.additionalData) {\r\n            if (!(ArrayBuffer.isView(alg.additionalData) || alg.additionalData instanceof ArrayBuffer)) {\r\n                throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, \"additionalData\", \"ArrayBufferView or ArrayBuffer\");\r\n            }\r\n        }\r\n        // If the iv member of normalizedAlgorithm has a length greater than 2^64 - 1 bytes, then throw an OperationError.\r\n        if (!alg.iv) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_REQUIRED, \"iv\");\r\n        }\r\n        if (!(ArrayBuffer.isView(alg.iv) || alg.iv instanceof ArrayBuffer)) {\r\n            throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_TYPE, \"iv\", \"ArrayBufferView or ArrayBuffer\");\r\n        }\r\n        // If the tagLength member of normalizedAlgorithm is not present: Let tagLength be 128.\r\n        if (alg.tagLength) {\r\n            // If the tagLength member of normalizedAlgorithm is one of 32, 64, 96, 104, 112, 120 or 128:\r\n            // Let tagLength be equal to the tagLength member of normalizedAlgorithm\r\n            const ok = [32, 64, 96, 104, 112, 120, 128].some((tagLength) => {\r\n                return tagLength === alg.tagLength;\r\n            });\r\n            if (!ok) {\r\n                throw new AesAlgorithmError(AesAlgorithmError.PARAM_WRONG_VALUE, \"tagLength\", \"32, 64, 96, 104, 112, 120 or 128\");\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport class AesKW extends AesWrapKey {\r\n\r\n    public static ALG_NAME = AlgorithmNames.AesKW;\r\n    public static KEY_USAGES: string[] = [\"wrapKey\", \"unwrapKey\"];\r\n\r\n    public static checkAlgorithmParams(alg: AesGcmParams) {\r\n        this.checkAlgorithm(alg);\r\n    }\r\n\r\n}\r\n","import { AlgorithmNames } from \"../alg\";\r\nimport { BaseCrypto } from \"../base\";\r\nimport { AlgorithmError } from \"../error\";\r\n\r\nexport const ShaAlgorithms = [AlgorithmNames.Sha1, AlgorithmNames.Sha256, AlgorithmNames.Sha384, AlgorithmNames.Sha512].join(\" | \");\r\n\r\nexport class Sha extends BaseCrypto {\r\n\r\n    static checkAlgorithm(alg: AlgorithmIdentifier) {\r\n        let _alg: Algorithm;\r\n        if (typeof alg === \"string\")\r\n            _alg = { name: alg };\r\n        else\r\n            _alg = alg;\r\n        super.checkAlgorithm(_alg);\r\n        switch (_alg.name.toUpperCase()) {\r\n            case AlgorithmNames.Sha1:\r\n            case AlgorithmNames.Sha256:\r\n            case AlgorithmNames.Sha384:\r\n            case AlgorithmNames.Sha512:\r\n                break;\r\n            default:\r\n                throw new AlgorithmError(AlgorithmError.WRONG_ALG_NAME, _alg.name, ShaAlgorithms);\r\n        }\r\n    }\r\n\r\n    static digest(algorithm: Algorithm, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n}","import { AesCBC, AesCTR, AesGCM, AesKW } from \"../aes/crypto\";\r\nimport { AlgorithmNames } from \"../alg\";\r\nimport { BaseCrypto } from \"../base\";\r\nimport { AlgorithmError, CryptoKeyError, WebCryptoError } from \"../error\";\r\nimport { Sha } from \"../sha/crypto\";\r\n\r\nexport class EcKeyGenParamsError extends AlgorithmError {\r\n    public code = 9;\r\n}\r\n\r\nexport class Ec extends BaseCrypto {\r\n\r\n    public static ALG_NAME = \"\";\r\n    public static KEY_USAGES: string[] = [];\r\n\r\n    public static checkAlgorithm(alg: Algorithm) {\r\n        if (alg.name.toUpperCase() !== this.ALG_NAME.toUpperCase()) {\r\n            throw new AlgorithmError(AlgorithmError.WRONG_ALG_NAME, alg.name, this.ALG_NAME);\r\n        }\r\n    }\r\n\r\n    public static checkKeyGenParams(alg: EcKeyGenParams) {\r\n        const paramNamedCurve = \"namedCurve\";\r\n        if (!alg.namedCurve) {\r\n            throw new EcKeyGenParamsError(EcKeyGenParamsError.PARAM_REQUIRED, paramNamedCurve);\r\n        }\r\n        if (!(typeof alg.namedCurve === \"string\")) {\r\n            throw new EcKeyGenParamsError(EcKeyGenParamsError.PARAM_WRONG_TYPE, paramNamedCurve, \"string\");\r\n        }\r\n        switch (alg.namedCurve.toUpperCase()) {\r\n            case \"P-256\":\r\n            case \"P-384\":\r\n            case \"P-521\":\r\n                break;\r\n            default:\r\n                throw new EcKeyGenParamsError(EcKeyGenParamsError.PARAM_WRONG_VALUE, paramNamedCurve, \"P-256, P-384 or P-521\");\r\n        }\r\n    }\r\n\r\n    public static checkKeyGenUsages(keyUsages: string[]) {\r\n        keyUsages.forEach((usage) => {\r\n            let i = 0;\r\n            for (i; i < this.KEY_USAGES.length; i++) {\r\n                if (this.KEY_USAGES[i].toLowerCase() === usage.toLowerCase()) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === this.KEY_USAGES.length) {\r\n                throw new WebCryptoError(`Unsupported key usage '${usage}'. Should be one of [${this.KEY_USAGES.join(\", \")}]`);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static generateKey(algorithm: EcKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey | CryptoKeyPair> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            this.checkKeyGenParams(algorithm);\r\n            this.checkKeyGenUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkKey(key, this.ALG_NAME);\r\n            if (!(format && format.toLowerCase() === \"raw\" && key.type === \"public\")) {\r\n                this.checkFormat(format, key.type);\r\n            }\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static importKey(format: string, keyData: JsonWebKey | Uint8Array, algorithm: EcKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkKeyGenParams(algorithm);\r\n            this.checkFormat(format);\r\n            this.checkKeyGenUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class EcAlgorithmError extends AlgorithmError {\r\n    public code = 10;\r\n}\r\n\r\nexport class EcDSA extends Ec {\r\n\r\n    public static ALG_NAME = AlgorithmNames.EcDSA;\r\n    public static KEY_USAGES: string[] = [\"sign\", \"verify\", \"deriveKey\", \"deriveBits\"];\r\n\r\n    public static checkAlgorithmParams(alg: EcdsaParams) {\r\n        this.checkAlgorithm(alg);\r\n        Sha.checkAlgorithm(alg.hash as Algorithm);\r\n    }\r\n\r\n    public static sign(algorithm: EcdsaParams, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"private\", \"sign\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static verify(algorithm: EcdsaParams, key: CryptoKey, signature: Uint8Array, data: Uint8Array): PromiseLike<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"public\", \"verify\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class EcDH extends Ec {\r\n\r\n    public static ALG_NAME = AlgorithmNames.EcDH;\r\n    public static KEY_USAGES: string[] = [\"deriveKey\", \"deriveBits\"];\r\n\r\n    public static checkDeriveParams(algorithm: EcdhKeyDeriveParams) {\r\n        const paramPublic = \"public\";\r\n        this.checkAlgorithm(algorithm);\r\n        if (!algorithm.public) {\r\n            throw new EcAlgorithmError(EcAlgorithmError.PARAM_REQUIRED, paramPublic);\r\n        }\r\n        this.checkKey(algorithm.public, this.ALG_NAME, \"public\");\r\n    }\r\n\r\n    public static deriveBits(algorithm: EcdhKeyDeriveParams, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkDeriveParams(algorithm);\r\n            this.checkKey(baseKey, this.ALG_NAME, \"private\", \"deriveBits\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static deriveKey(algorithm: EcdhKeyDeriveParams, baseKey: CryptoKey, derivedKeyType: AesDerivedKeyParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkDeriveParams(algorithm);\r\n            this.checkKey(baseKey, this.ALG_NAME, \"private\", \"deriveKey\");\r\n            BaseCrypto.checkAlgorithm(derivedKeyType);\r\n            switch (derivedKeyType.name.toUpperCase()) {\r\n                case AlgorithmNames.AesCBC:\r\n                    AesCBC.checkKeyGenParams(derivedKeyType);\r\n                    break;\r\n                case AlgorithmNames.AesCTR:\r\n                    AesCTR.checkKeyGenParams(derivedKeyType);\r\n                    break;\r\n                case AlgorithmNames.AesGCM:\r\n                    AesGCM.checkKeyGenParams(derivedKeyType);\r\n                    break;\r\n                case AlgorithmNames.AesKW:\r\n                    AesKW.checkKeyGenParams(derivedKeyType);\r\n                    break;\r\n                default:\r\n                    throw new EcAlgorithmError(`Unsupported name '${derivedKeyType.name}' for algorithm in param 'derivedKeyType'`);\r\n            }\r\n            resolve(undefined);\r\n        });\r\n    }\r\n}\r\n","import { AlgorithmNames } from \"../alg\";\r\nimport { BaseCrypto } from \"../base\";\r\nimport { AlgorithmError, CryptoKeyError, WebCryptoError } from \"../error\";\r\n\r\nexport class Hmac extends BaseCrypto {\r\n\r\n    public static ALG_NAME = AlgorithmNames.Hmac;\r\n    public static KEY_USAGES: string[] = [\"sign\", \"verify\"];\r\n\r\n    public static checkAlgorithm(alg: Algorithm) {\r\n        if (alg.name.toUpperCase() !== this.ALG_NAME.toUpperCase()) {\r\n            throw new AlgorithmError(AlgorithmError.WRONG_ALG_NAME, alg.name, this.ALG_NAME);\r\n        }\r\n    }\r\n\r\n    public static checkKeyGenParams(alg: AesKeyGenParams) {\r\n        // length is optional\r\n        if (\"length\" in alg && !(alg.length > 0 && alg.length <= 512)) {\r\n            throw new AlgorithmError(AlgorithmError.PARAM_WRONG_VALUE, \"length\", \"more 0 and less than 512\");\r\n        }\r\n    }\r\n\r\n    public static checkKeyGenUsages(keyUsages: string[]) {\r\n        this.checkKeyUsages(keyUsages);\r\n\r\n        keyUsages.forEach((usage) => {\r\n            let i = 0;\r\n            for (i; i < this.KEY_USAGES.length; i++) {\r\n                if (this.KEY_USAGES[i].toLowerCase() === usage.toLowerCase()) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === this.KEY_USAGES.length) {\r\n                throw new WebCryptoError(`Unsupported key usage '${usage}'. Should be one of [${this.KEY_USAGES.join(\", \")}]`);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public static generateKey(algorithm: AesKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey | CryptoKeyPair> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            this.checkKeyGenParams(algorithm);\r\n            this.checkKeyGenUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkKey(key, this.ALG_NAME);\r\n            this.checkFormat(format, key.type);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static importKey(format: string, keyData: JsonWebKey | Uint8Array, algorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            this.checkFormat(format);\r\n            if (!(format.toLowerCase() === \"raw\" || format.toLowerCase() === \"jwk\")) {\r\n                throw new CryptoKeyError(CryptoKeyError.ALLOWED_FORMAT, format, \"'jwk' or 'raw'\");\r\n            }\r\n            this.checkKeyGenUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static sign(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"secret\", \"sign\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static verify(algorithm: Algorithm, key: CryptoKey, signature: Uint8Array, data: Uint8Array): PromiseLike<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"secret\", \"verify\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n","import * as Aes from \"../aes/crypto\";\r\nimport { AlgorithmNames } from \"../alg\";\r\nimport { BaseCrypto, PrepareAlgorithm } from \"../base\";\r\nimport { AlgorithmError, CryptoKeyError, WebCryptoError } from \"../error\";\r\nimport { Hmac } from \"../hmac/crypto\";\r\nimport { Sha } from \"../sha/crypto\";\r\n\r\nexport class Pbkdf2 extends BaseCrypto {\r\n\r\n    public static ALG_NAME = AlgorithmNames.Pbkdf2;\r\n    public static KEY_USAGES: string[] = [\"deriveKey\", \"deriveBits\"];\r\n\r\n    public static checkAlgorithm(alg: Algorithm) {\r\n        if (alg.name.toUpperCase() !== this.ALG_NAME.toUpperCase()) {\r\n            throw new AlgorithmError(AlgorithmError.WRONG_ALG_NAME, alg.name, this.ALG_NAME);\r\n        }\r\n    }\r\n\r\n    public static checkDeriveParams(alg: Pbkdf2Params) {\r\n        this.checkAlgorithm(alg);\r\n\r\n        // salt\r\n        if (alg.salt) {\r\n            if (!(ArrayBuffer.isView(alg.salt) || alg.salt instanceof ArrayBuffer)) {\r\n                throw new AlgorithmError(AlgorithmError.PARAM_WRONG_TYPE, \"salt\", \"ArrayBuffer or ArrayBufferView\");\r\n            }\r\n        } else {\r\n            throw new AlgorithmError(AlgorithmError.PARAM_REQUIRED, \"salt\");\r\n        }\r\n\r\n        // iterations\r\n        if (!alg.iterations) {\r\n            throw new AlgorithmError(AlgorithmError.PARAM_REQUIRED, \"iterations\");\r\n        }\r\n\r\n        // hash\r\n        if (!alg.hash) {\r\n            throw new AlgorithmError(AlgorithmError.PARAM_REQUIRED, \"hash\");\r\n        }\r\n        const hash = PrepareAlgorithm(alg.hash);\r\n        Sha.checkAlgorithm(hash);\r\n    }\r\n\r\n    public static importKey(format: string, keyData: JsonWebKey | BufferSource, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                if (extractable) {\r\n                    throw new WebCryptoError(\"KDF keys must set extractable=false\");\r\n                }\r\n                this.checkAlgorithm(algorithm as Algorithm);\r\n                this.checkFormat(format);\r\n                if (format.toLowerCase() !== \"raw\") {\r\n                    throw new CryptoKeyError(CryptoKeyError.ALLOWED_FORMAT, format, \"'raw'\");\r\n                }\r\n                this.checkKeyUsages(keyUsages);\r\n            }) as any;\r\n    }\r\n\r\n    public static deriveKey(algorithm: Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                this.checkDeriveParams(algorithm);\r\n                this.checkKey(baseKey, this.ALG_NAME, \"secret\", \"deriveKey\");\r\n                BaseCrypto.checkAlgorithm(derivedKeyType);\r\n                // AES-CTR, AES-CBC, AES-CMAC, AES-GCM, AES-CFB, AES-KW, ECDH, DH, or HMAC\r\n                switch (derivedKeyType.name.toUpperCase()) {\r\n                    case AlgorithmNames.AesCBC:\r\n                        Aes.AesCBC.checkKeyGenParams(derivedKeyType as AesDerivedKeyParams);\r\n                        Aes.AesCBC.checkKeyUsages(keyUsages);\r\n                        break;\r\n                    case AlgorithmNames.AesCTR:\r\n                        Aes.AesCTR.checkKeyGenParams(derivedKeyType as AesDerivedKeyParams);\r\n                        Aes.AesCTR.checkKeyUsages(keyUsages);\r\n                        break;\r\n                    case AlgorithmNames.AesGCM:\r\n                        Aes.AesGCM.checkKeyGenParams(derivedKeyType as AesDerivedKeyParams);\r\n                        Aes.AesGCM.checkKeyUsages(keyUsages);\r\n                        break;\r\n                    case AlgorithmNames.AesKW:\r\n                        Aes.AesKW.checkKeyGenParams(derivedKeyType as AesDerivedKeyParams);\r\n                        Aes.AesKW.checkKeyUsages(keyUsages);\r\n                        break;\r\n                    case AlgorithmNames.Hmac:\r\n                        Hmac.checkKeyGenParams(derivedKeyType as any);\r\n                        Hmac.checkKeyUsages(keyUsages);\r\n                        break;\r\n                    default:\r\n                        throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, derivedKeyType);\r\n                }\r\n            }) as any;\r\n    }\r\n\r\n    public static deriveBits(algorithm: Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer> {\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                this.checkDeriveParams(algorithm);\r\n                this.checkKey(baseKey, this.ALG_NAME, \"secret\", \"deriveBits\");\r\n                if (!(length && typeof length === \"number\")) {\r\n                    throw new WebCryptoError(\"Parameter 'length' must be Number and more than 0\");\r\n                }\r\n            }) as any;\r\n    }\r\n}\r\n","import { AlgorithmNames } from \"../alg\";\r\nimport { BaseCrypto } from \"../base\";\r\nimport { AlgorithmError, CryptoKeyError, WebCryptoError } from \"../error\";\r\nimport { Sha, ShaAlgorithms } from \"../sha/crypto\";\r\n\r\nexport class RsaKeyGenParamsError extends AlgorithmError {\r\n    public code = 2;\r\n}\r\n\r\nexport class RsaHashedImportParamsError extends AlgorithmError {\r\n    public code = 6;\r\n}\r\n\r\nexport class Rsa extends BaseCrypto {\r\n\r\n    public static ALG_NAME = \"\";\r\n    public static KEY_USAGES: string[] = [];\r\n\r\n    public static checkAlgorithm(alg: Algorithm) {\r\n        if (alg.name.toUpperCase() !== this.ALG_NAME.toUpperCase()) {\r\n            throw new AlgorithmError(AlgorithmError.WRONG_ALG_NAME, alg.name, this.ALG_NAME);\r\n        }\r\n    }\r\n\r\n    public static checkImportAlgorithm(alg: RsaHashedImportParams) {\r\n        /**\r\n         * Check alg name. Use the same way as Chrome uses.\r\n         * It throws error if algorithm doesn't have a `name` paramter\r\n         * But it's not a equal to W3 specification\r\n         * https://www.w3.org/TR/WebCryptoAPI/#dfn-RsaHashedImportParams\r\n         *   \r\n         */\r\n        this.checkAlgorithm(alg as any);\r\n        if (!alg.hash) {\r\n            throw new RsaHashedImportParamsError(RsaHashedImportParamsError.PARAM_REQUIRED, \"hash\");\r\n        }\r\n        Sha.checkAlgorithm(alg.hash as Algorithm);\r\n    }\r\n\r\n    public static checkKeyGenParams(alg: RsaHashedKeyGenParams) {\r\n        // modulusLength\r\n        switch (alg.modulusLength) {\r\n            case 1024:\r\n            case 2048:\r\n            case 4096:\r\n                break;\r\n            default:\r\n                throw new RsaKeyGenParamsError(RsaKeyGenParamsError.PARAM_WRONG_VALUE, \"modulusLength\", \"1024, 2048 or 4096\");\r\n        }\r\n        // publicExponent\r\n        const pubExp = alg.publicExponent;\r\n        if (!pubExp) {\r\n            throw new RsaKeyGenParamsError(RsaKeyGenParamsError.PARAM_REQUIRED, \"publicExponent\");\r\n        }\r\n        if (!ArrayBuffer.isView(pubExp)) {\r\n            throw new RsaKeyGenParamsError(RsaKeyGenParamsError.PARAM_WRONG_TYPE, \"publicExponent\", \"ArrayBufferView\");\r\n        }\r\n        if (!(pubExp[0] === 3 || (pubExp[0] === 1 && pubExp[1] === 0 && pubExp[2] === 1))) {\r\n            throw new RsaKeyGenParamsError(RsaKeyGenParamsError.PARAM_WRONG_VALUE, \"publicExponent\", \"Uint8Array([3]) | Uint8Array([1, 0, 1])\");\r\n        }\r\n        // hash\r\n        if (!alg.hash) {\r\n            throw new RsaKeyGenParamsError(RsaKeyGenParamsError.PARAM_REQUIRED, \"hash\", ShaAlgorithms);\r\n        }\r\n        Sha.checkAlgorithm(alg.hash as Algorithm);\r\n    }\r\n\r\n    public static checkKeyGenUsages(keyUsages: string[]) {\r\n        this.checkKeyUsages(keyUsages);\r\n        keyUsages.forEach((usage) => {\r\n            let i = 0;\r\n            for (i; i < this.KEY_USAGES.length; i++) {\r\n                if (this.KEY_USAGES[i].toLowerCase() === usage.toLowerCase()) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === this.KEY_USAGES.length) {\r\n                throw new WebCryptoError(`Unsupported key usage '${usage}'. Should be one of [${this.KEY_USAGES.join(\", \")}]`);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static generateKey(algorithm: RsaHashedKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey | CryptoKeyPair> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithm(algorithm);\r\n            this.checkKeyGenParams(algorithm);\r\n            this.checkKeyGenUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkKey(key, this.ALG_NAME);\r\n            this.checkFormat(format, key.type);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static importKey(format: string, keyData: JsonWebKey | BufferSource, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkImportAlgorithm(algorithm as RsaHashedImportParams);\r\n            this.checkFormat(format);\r\n            if (format.toLowerCase() === \"raw\") {\r\n                throw new CryptoKeyError(CryptoKeyError.ALLOWED_FORMAT, format, \"'JsonWebKey', 'pkcs8' or 'spki'\");\r\n            }\r\n            this.checkKeyGenUsages(keyUsages);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class RsaSSA extends Rsa {\r\n\r\n    public static ALG_NAME = AlgorithmNames.RsaSSA;\r\n    public static KEY_USAGES: string[] = [\"sign\", \"verify\"];\r\n\r\n    public static sign(algorithm: Algorithm, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"private\", \"sign\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static verify(algorithm: Algorithm, key: CryptoKey, signature: Uint8Array, data: Uint8Array): PromiseLike<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"public\", \"verify\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport class RsaPSSParamsError extends AlgorithmError {\r\n    public code = 4;\r\n}\r\n\r\nexport class RsaPSS extends RsaSSA {\r\n\r\n    public static ALG_NAME = AlgorithmNames.RsaPSS;\r\n\r\n    public static checkAlgorithmParams(algorithm: Algorithm) {\r\n        const alg: RsaPssParams = algorithm as any;\r\n        super.checkAlgorithmParams(alg as any);\r\n        if (!alg.saltLength) {\r\n            throw new RsaPSSParamsError(RsaPSSParamsError.PARAM_REQUIRED, \"saltLength\");\r\n        }\r\n        if (alg.saltLength < 0) {\r\n            throw new RsaPSSParamsError(\"Parameter 'saltLength' is outside of numeric range\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class RsaOAEPParamsError extends AlgorithmError {\r\n    public code = 5;\r\n}\r\n\r\nexport class RsaOAEP extends Rsa {\r\n\r\n    public static ALG_NAME = AlgorithmNames.RsaOAEP;\r\n    public static KEY_USAGES: string[] = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n\r\n    public static checkAlgorithmParams(alg: RsaOaepParams) {\r\n        if (alg.label) {\r\n            if (!(ArrayBuffer.isView(alg.label) || alg.label instanceof ArrayBuffer)) {\r\n                throw new RsaOAEPParamsError(RsaOAEPParamsError.PARAM_WRONG_TYPE, \"label\", \"ArrayBufferView or ArrayBuffer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public static encrypt(algorithm: RsaOaepParams, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"public\", \"encrypt\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static decrypt(algorithm: RsaOaepParams, key: CryptoKey, data: Uint8Array): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(algorithm);\r\n            this.checkKey(key, this.ALG_NAME, \"private\", \"decrypt\");\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: RsaOaepParams): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(wrapAlgorithm);\r\n            this.checkKey(wrappingKey, this.ALG_NAME, \"public\", \"wrapKey\");\r\n            this.checkWrappedKey(key);\r\n            this.checkFormat(format, key.type);\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n    public static unwrapKey(format: string, wrappedKey: Uint8Array, unwrappingKey: CryptoKey, unwrapAlgorithm: RsaOaepParams, unwrappedKeyAlgorithm: Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            this.checkAlgorithmParams(unwrapAlgorithm);\r\n            this.checkKey(unwrappingKey, this.ALG_NAME, \"private\", \"unwrapKey\");\r\n            this.checkFormat(format);\r\n            // TODO check unwrappedKeyAlgorithm\r\n            // TODO check keyUSages\r\n            resolve(undefined);\r\n        });\r\n    }\r\n\r\n}\r\n","import { AlgorithmNames } from \"./alg\";\r\nimport { BaseCrypto, PrepareAlgorithm, PrepareData } from \"./base\";\r\nimport { AlgorithmError, CryptoKeyError, WebCryptoError } from \"./error\";\r\n\r\nimport { AesCBC, AesCTR, AesGCM, AesKW } from \"./aes/crypto\";\r\nimport { EcDH, EcDSA } from \"./ec/crypto\";\r\nimport { Hmac } from \"./hmac/crypto\";\r\nimport { Pbkdf2 } from \"./pbkdf2/crypto\";\r\nimport { RsaOAEP, RsaPSS, RsaSSA } from \"./rsa/crypto\";\r\nimport { Sha } from \"./sha/crypto\";\r\n\r\nexport class SubtleCrypto implements NativeSubtleCrypto {\r\n\r\n    public generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey>;\r\n    public generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams | DhKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair>;\r\n    public generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\r\n    public generateKey(algorithm: any, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaSSA.toUpperCase():\r\n                    Class = RsaSSA;\r\n                    break;\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.RsaPSS.toUpperCase():\r\n                    Class = RsaPSS;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                case AlgorithmNames.AesKW.toUpperCase():\r\n                    Class = AesKW;\r\n                    break;\r\n                case AlgorithmNames.EcDSA.toUpperCase():\r\n                    Class = EcDSA;\r\n                    break;\r\n                case AlgorithmNames.EcDH.toUpperCase():\r\n                    Class = EcDH;\r\n                    break;\r\n                case AlgorithmNames.Hmac.toUpperCase():\r\n                    Class = Hmac;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.generateKey(alg, extractable, keyUsages).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public digest(algorithm: AlgorithmIdentifier, data: BufferSource): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            const buf = PrepareData(data, \"data\");\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.Sha1.toUpperCase():\r\n                case AlgorithmNames.Sha256.toUpperCase():\r\n                case AlgorithmNames.Sha384.toUpperCase():\r\n                case AlgorithmNames.Sha512.toUpperCase():\r\n                    Class = Sha;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.digest(alg, buf).then(resolve, reject);\r\n        });\r\n\r\n    }\r\n\r\n    public sign(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer>;\r\n    public sign(algorithm: any, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm as any);\r\n            const buf = PrepareData(data, \"data\");\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaSSA.toUpperCase():\r\n                    Class = RsaSSA;\r\n                    break;\r\n                case AlgorithmNames.RsaPSS.toUpperCase():\r\n                    Class = RsaPSS;\r\n                    break;\r\n                case AlgorithmNames.EcDSA.toUpperCase():\r\n                    Class = EcDSA;\r\n                    break;\r\n                case AlgorithmNames.Hmac.toUpperCase():\r\n                    Class = Hmac;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.sign(alg, key, buf).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public verify(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, signature: BufferSource, data: BufferSource): PromiseLike<boolean>;\r\n    public verify(algorithm: any, key: CryptoKey, signature: BufferSource, data: BufferSource): PromiseLike<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm as any);\r\n            const sigBuf = PrepareData(data, \"signature\");\r\n            const buf = PrepareData(data, \"data\");\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaSSA.toUpperCase():\r\n                    Class = RsaSSA;\r\n                    break;\r\n                case AlgorithmNames.RsaPSS.toUpperCase():\r\n                    Class = RsaPSS;\r\n                    break;\r\n                case AlgorithmNames.EcDSA.toUpperCase():\r\n                    Class = EcDSA;\r\n                    break;\r\n                case AlgorithmNames.Hmac.toUpperCase():\r\n                    Class = Hmac;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.verify(alg, key, sigBuf, buf).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public encrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer>;\r\n    public encrypt(algorithm: any, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            const buf = PrepareData(data, \"data\");\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.encrypt(alg, key, buf).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public decrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer>;\r\n    public decrypt(algorithm: any, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            const buf = PrepareData(data, \"data\");\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.decrypt(alg, key, buf).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public deriveBits(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer>;\r\n    public deriveBits(algorithm: any, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.EcDH.toUpperCase():\r\n                    Class = EcDH;\r\n                    break;\r\n                case AlgorithmNames.Pbkdf2.toUpperCase():\r\n                    Class = Pbkdf2;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.deriveBits(alg, baseKey, length).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public deriveKey(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: string | AesDerivedKeyParams | HmacImportParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\r\n    public deriveKey(algorithm: any, baseKey: CryptoKey, derivedKeyType: any, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            const derivedAlg = PrepareAlgorithm(derivedKeyType);\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.EcDH.toUpperCase():\r\n                    Class = EcDH;\r\n                    break;\r\n                case AlgorithmNames.Pbkdf2.toUpperCase():\r\n                    Class = Pbkdf2;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.deriveKey(alg, baseKey, derivedAlg, extractable, keyUsages).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public exportKey(format: \"jwk\", key: CryptoKey): PromiseLike<JsonWebKey>;\r\n    public exportKey(format: \"raw\" | \"pkcs8\" | \"spki\", key: CryptoKey): PromiseLike<ArrayBuffer>;\r\n    public exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer>;\r\n    public exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            BaseCrypto.checkKey(key);\r\n            if (!key.extractable) {\r\n                throw new CryptoKeyError(CryptoKeyError.NOT_EXTRACTABLE);\r\n            }\r\n            let Class = BaseCrypto;\r\n            switch (key.algorithm.name!.toUpperCase()) {\r\n                case AlgorithmNames.RsaSSA.toUpperCase():\r\n                    Class = RsaSSA;\r\n                    break;\r\n                case AlgorithmNames.RsaPSS.toUpperCase():\r\n                    Class = RsaPSS;\r\n                    break;\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                case AlgorithmNames.AesKW.toUpperCase():\r\n                    Class = AesKW;\r\n                    break;\r\n                case AlgorithmNames.EcDSA.toUpperCase():\r\n                    Class = EcDSA;\r\n                    break;\r\n                case AlgorithmNames.EcDH.toUpperCase():\r\n                    Class = EcDH;\r\n                    break;\r\n                case AlgorithmNames.Hmac.toUpperCase():\r\n                    Class = Hmac;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, key.algorithm.name);\r\n            }\r\n            Class.exportKey(format, key).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\r\n    public importKey(format: \"raw\" | \"pkcs8\" | \"spki\", keyData: BufferSource, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\r\n    public importKey(format: string, keyData: JsonWebKey | BufferSource, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>;\r\n    public importKey(format: string, keyData: JsonWebKey | BufferSource, algorithm: any, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(algorithm);\r\n            let Class = BaseCrypto;\r\n            // TODO prepare keyData\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaSSA.toUpperCase():\r\n                    Class = RsaSSA;\r\n                    break;\r\n                case AlgorithmNames.RsaPSS.toUpperCase():\r\n                    Class = RsaPSS;\r\n                    break;\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                case AlgorithmNames.AesKW.toUpperCase():\r\n                    Class = AesKW;\r\n                    break;\r\n                case AlgorithmNames.EcDSA.toUpperCase():\r\n                    Class = EcDSA;\r\n                    break;\r\n                case AlgorithmNames.EcDH.toUpperCase():\r\n                    Class = EcDH;\r\n                    break;\r\n                case AlgorithmNames.Hmac.toUpperCase():\r\n                    Class = Hmac;\r\n                    break;\r\n                case AlgorithmNames.Pbkdf2.toUpperCase():\r\n                    Class = Pbkdf2;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.importKey(format, keyData, alg, extractable, keyUsages).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier): PromiseLike<ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const alg = PrepareAlgorithm(wrapAlgorithm);\r\n            let Class = BaseCrypto;\r\n            switch (alg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                case AlgorithmNames.AesKW.toUpperCase():\r\n                    Class = AesKW;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, alg.name);\r\n            }\r\n            Class.wrapKey(format, key, wrappingKey, alg).then(resolve, reject);\r\n        });\r\n    }\r\n\r\n    public unwrapKey(format: string, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier, unwrappedKeyAlgorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey> {\r\n        return new Promise((resolve, reject) => {\r\n            const unwrapAlg = PrepareAlgorithm(unwrapAlgorithm);\r\n            const unwrappedAlg = PrepareAlgorithm(unwrappedKeyAlgorithm);\r\n            const buf = PrepareData(wrappedKey, \"wrappedKey\");\r\n            let Class = BaseCrypto;\r\n            switch (unwrapAlg.name.toUpperCase()) {\r\n                case AlgorithmNames.RsaOAEP.toUpperCase():\r\n                    Class = RsaOAEP;\r\n                    break;\r\n                case AlgorithmNames.AesCBC.toUpperCase():\r\n                    Class = AesCBC;\r\n                    break;\r\n                case AlgorithmNames.AesCTR.toUpperCase():\r\n                    Class = AesCTR;\r\n                    break;\r\n                case AlgorithmNames.AesGCM.toUpperCase():\r\n                    Class = AesGCM;\r\n                    break;\r\n                case AlgorithmNames.AesKW.toUpperCase():\r\n                    Class = AesKW;\r\n                    break;\r\n                default:\r\n                    throw new AlgorithmError(AlgorithmError.UNSUPPORTED_ALGORITHM, unwrapAlg.name);\r\n            }\r\n            Class.unwrapKey(format, buf, unwrappingKey, unwrapAlg, unwrappedAlg, extractable, keyUsages).then(resolve, reject);\r\n        });\r\n    }\r\n}\r\n"],"names":["tslib_1.__extends","Aes.AesCBC","Aes.AesCTR","Aes.AesGCM","Aes.AesKW"],"mappings":"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"}