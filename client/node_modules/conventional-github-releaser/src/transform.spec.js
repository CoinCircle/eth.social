'use strict';

// jshint expr: true

var chai = require('chai');
var transform = require('./transform');

var expect = chai.expect;

/*
  The contents of `gitTags` is generated by the `git-raw-commits` package, which runs the following command:

    git log --format=%B%n-hash-%n%H%n-gitTags-%n%d%n-committerDate-%n%ci

  That command returns a list of log entries with output in the following form per commit:

    -hash-
    e26c9a71a638ef9d4e12c2512fcdf813399559a1
    -gitTags-
     (tag: 1.1.8)
    -committerDate-
    2017-05-29 13:42:41 -0500
    1.1.8

  The value of `gitTags` is the line between `-gitTags-` and `-committerDate-`.
*/

describe('transform', function() {
  beforeEach(function() {
    this.chunk = {
      gitTags: '',
    };
  });

  it('should skip semantic version matching when gitTags isn\'t a string', function(done) {
    this.chunk.gitTags = undefined;

    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.be.undefined;
      done();
    });
  });

  it('should have no version when there are no tags', function(done) {
    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.be.undefined;
      done();
    });
  });

  it('should not match invalid semantic version tag', function(done) {
    this.chunk.gitTags = ' (tag: release-18)';

    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.be.undefined;
      done();
    });
  });

  it('should match valid semantic version tag', function(done) {
    this.chunk.gitTags = ' (tag: 1.1.20)';

    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.equal('1.1.20');
      done();
    });
  });

  it('should match valid semantic version tag containing a leading `v`', function(done) {
    this.chunk.gitTags = ' (tag: v1.1.20)';

    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.equal('v1.1.20');
      done();
    });
  });

  it('should find valid semantic version tag out of many tags', function(done) {
    this.chunk.gitTags = ' (HEAD -> master, tag: something, tag: 1.1.20, origin/master, origin/HEAD)';

    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.equal('1.1.20');
      done();
    });
  });

  it('should match first semantic version tag when there are multiple valid tags', function(done) {
    this.chunk.gitTags = ' (tag: 1.1.19, tag: 1.1.20)';

    transform(this.chunk, function(err, chunk) {
      expect(chunk.version).to.equal('1.1.19');
      done();
    });
  });
});
