{
  "_args": [
    [
      {
        "raw": "fs-ext@github:baudehlo/node-fs-ext#master",
        "scope": null,
        "escapedName": "fs-ext",
        "name": "fs-ext",
        "rawSpec": "github:baudehlo/node-fs-ext#master",
        "spec": "github:baudehlo/node-fs-ext#master",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:baudehlo/node-fs-ext.git#master",
          "sshUrl": "git+ssh://git@github.com/baudehlo/node-fs-ext.git#master",
          "httpsUrl": "git+https://github.com/baudehlo/node-fs-ext.git#master",
          "gitUrl": "git://github.com/baudehlo/node-fs-ext.git#master",
          "shortcut": "github:baudehlo/node-fs-ext#master",
          "directUrl": "https://raw.githubusercontent.com/baudehlo/node-fs-ext/master/package.json"
        }
      },
      "/Users/mota/Sandbox/eth.social/client/node_modules/lock-me"
    ]
  ],
  "_from": "baudehlo/node-fs-ext#master",
  "_id": "fs-ext@0.6.0",
  "_inCache": true,
  "_location": "/fs-ext",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs-ext@github:baudehlo/node-fs-ext#master",
    "scope": null,
    "escapedName": "fs-ext",
    "name": "fs-ext",
    "rawSpec": "github:baudehlo/node-fs-ext#master",
    "spec": "github:baudehlo/node-fs-ext#master",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:baudehlo/node-fs-ext.git#master",
      "sshUrl": "git+ssh://git@github.com/baudehlo/node-fs-ext.git#master",
      "httpsUrl": "git+https://github.com/baudehlo/node-fs-ext.git#master",
      "gitUrl": "git://github.com/baudehlo/node-fs-ext.git#master",
      "shortcut": "github:baudehlo/node-fs-ext#master",
      "directUrl": "https://raw.githubusercontent.com/baudehlo/node-fs-ext/master/package.json"
    }
  },
  "_requiredBy": [
    "/lock-me"
  ],
  "_resolved": "git://github.com/baudehlo/node-fs-ext.git#808593cfc6da4912d48ed0579e06b8e058b10a7e",
  "_shasum": "4fb9c951e1ebafc3dd1a47ad56938723550be632",
  "_shrinkwrap": null,
  "_spec": "fs-ext@github:baudehlo/node-fs-ext#master",
  "_where": "/Users/mota/Sandbox/eth.social/client/node_modules/lock-me",
  "author": {
    "name": "Matt Sergeant",
    "email": "helpme@gmail.com",
    "url": "http://baudehlo.wordpress.com/"
  },
  "bugs": {
    "url": "https://github.com/baudehlo/node-fs-ext/issues"
  },
  "dependencies": {
    "nan": "^2.0"
  },
  "description": "Extensions to core 'fs' module.",
  "devDependencies": {
    "eslint": "^2.13.0"
  },
  "engines": {
    "node": ">= v0.8.0"
  },
  "gitHead": "808593cfc6da4912d48ed0579e06b8e058b10a7e",
  "homepage": "https://github.com/baudehlo/node-fs-ext/",
  "keywords": [
    "fs",
    "filesystem",
    "flock",
    "seek"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "fs-ext.js",
  "name": "fs-ext",
  "optionalDependencies": {},
  "readme": "fs-ext\n======\n\n[![Build Status][ci-img]][ci-url]\n[![Coverage Status][cov-img]][cov-url]\n[![Windows Status][ci-win-img]][ci-win-url]\n\nExtras not included in Node's fs module.\n\nInstallation\n------------\n\nInstall via npm:\n\n    npm install fs-ext\n\nUsage\n-----\n\nfs-ext imports all of the methods from the core 'fs' module, so you don't\nneed two objects.\n\n```js\nvar fs = require('fs-ext');\nvar fd = fs.openSync('foo.txt', 'r');\nfs.flock(fd, 'ex', function (err) {\n    if (err) {\n        return console.log(\"Couldn't lock file\");\n    }\n    // file is locked\n})\n```\n\nFor an advanced example checkout `example.js`.\n\nAPI\n---\n\n### fs.flock(fd, flags, [callback])\n\nAsynchronous flock(2). No arguments other than a possible error are passed to\nthe callback. Flags can be 'sh', 'ex', 'shnb', 'exnb', 'un' and correspond\nto the various LOCK_SH, LOCK_EX, LOCK_SH|LOCK_NB, etc.\n\nNOTE (from flock() man page): flock() does not lock files over NFS. Use fcntl(2)\ninstead: that does work over NFS, given a sufficiently recent version of Linux\nand a server which supports locking.\n\n\n### fs.flockSync(fd, flags)\n\nSynchronous flock(2). Throws an exception on error.\n\n### fs.fcntl(fd, cmd, [arg], [callback])\n\nAsynchronous fcntl(2).\n\ncallback will be given two arguments (err, result).\n\nThe supported commands are:\n\n- 'getfd' ( F_GETFD )\n- 'setfd' ( F_SETFD )\n- 'setlk' ( F_SETLK )\n- 'getlk' ( F_GETLK )\n- 'setlkw' ( F_SETLKW )\n\nRequiring this module adds `FD_CLOEXEC` to the constants module, for use with F_SETFD,\nand also F_RDLCK, F_WRLCK and F_UNLCK for use with F_SETLK (etc).\n\nFile locking can be used like so:\n\n\tfs.fcntl(fd, 'setlkw', constants.F_WRLCK, function(err, result) { \n\t\tif (result!=null) {\n\t\t\t//Lock succeeded\n\t\t}\n\t});\n\n### fs.fcntlSync(fd, flags)\n\nSynchronous fcntl(2). Throws an exception on error.\n\n### fs.seek(fd, offset, whence, [callback])\n\nAsynchronous lseek(2).  \n\ncallback will be given two arguments (err, currFilePos).\n\nwhence can be 0 (SEEK_SET) to set the new position in bytes to offset, \n1 (SEEK_CUR) to set the new position to the current position plus offset \nbytes (can be negative), or 2 (SEEK_END) to set to the end of the file \nplus offset bytes (usually negative or zero to seek to the end of the file).\n\n### fs.seekSync(fd, offset, whence)\n\nSynchronous lseek(2). Throws an exception on error.  Returns current\nfile position.\n\n\n### fs.utime(path [, atime, mtime] [, callback])\n\nAsynchronous utime(2).\n\nArguments `atime` and `mtime` are in seconds as for the system call.  Note\nthat the number value of Date() is in milliseconds, so to use the 'now'\nvalue with `fs.utime()` you would have to divide by 1000 first, e.g. \nDate.now()/1000\n\nJust like for utime(2), the absence of the `atime` and `mtime` means 'now'.\n\n### fs.utimeSync(path [, atime, mtime])\n\nSynchronous version of utime().  Throws an exception on error.\n\n\n\n[ci-img]: https://travis-ci.org/baudehlo/node-fs-ext.svg?branch=master\n[ci-url]: https://travis-ci.org/baudehlo/node-fs-ext\n[cov-img]: https://codecov.io/github/baudehlo/node-fs-ext/coverage.svg\n[cov-url]: https://codecov.io/github/baudehlo/node-fs-ext?branch=master\n[ci-win-img]: https://ci.appveyor.com/api/projects/status/pqbnutckk0n46uc8?svg=true\n[ci-win-url]: https://ci.appveyor.com/project/baudehlo/node-fs-ext/branch/master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/baudehlo/node-fs-ext.git"
  },
  "scripts": {
    "cover": "NODE_ENV=cov ./node_modules/.bin/istanbul cover ./run_tests",
    "install": "node-gyp configure build",
    "lint": "node ./node_modules/eslint/bin/eslint \"*.js\" \"tests/**/*.js\"",
    "test": "./run_tests"
  },
  "version": "0.6.0"
}
